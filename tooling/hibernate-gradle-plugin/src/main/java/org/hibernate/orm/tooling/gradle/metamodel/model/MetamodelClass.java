/*
 * Hibernate, Relational Persistence for Idiomatic Java
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later
 * See the lgpl.txt file in the root directory or http://www.gnu.org/licenses/lgpl-2.1.html
 */
package org.hibernate.orm.tooling.gradle.metamodel.model;

import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.text.DateFormat;
import java.util.Comparator;
import java.util.Date;
import java.util.TreeSet;

import org.hibernate.mapping.MappedSuperclass;
import org.hibernate.mapping.PersistentClass;

import static java.lang.Character.LINE_SEPARATOR;

/**
 * Descriptor for a class in the JPA static metamodel being generated
 */
public class MetamodelClass {

	private final String domainClassName;
	private final String metamodelClassName;

	private final String metamodelSuperClassName;

	private final TreeSet<MetamodelAttribute> attributes = new TreeSet<>( Comparator.comparing( MetamodelAttribute::getName ) );

	public MetamodelClass(String domainClassName, String superTypeName) {
		this.domainClassName = domainClassName;
		this.metamodelClassName = domainClassName + "_";
		this.metamodelSuperClassName = superTypeName == null ? null : superTypeName + "_";
	}

	public String getMetamodelClassName() {
		return metamodelClassName;
	}

	public void addAttribute(MetamodelAttribute attribute) {
		assert attribute != null;
		attributes.add( attribute );
	}

	public void writeToFile(File outputFile) {
		final Path path = outputFile.toPath();

		try ( final BufferedWriter writer = Files.newBufferedWriter( path, StandardCharsets.UTF_8, StandardOpenOption.WRITE ) ) {
			writer.write( "// Generated by Hibernate ORM Gradle tooling" + LINE_SEPARATOR );

			writer.write( "// " + DateFormat.getDateInstance().format( new Date() ) + LINE_SEPARATOR );

			writer.write( LINE_SEPARATOR );
			writer.write( "import javax.persistence.*;" + LINE_SEPARATOR );
			writer.write( "import javax.persistence.metamodel.*;" + LINE_SEPARATOR );
			writer.write( LINE_SEPARATOR );

			writer.write( "/** JPA static metamodel descriptor for the `" + domainClassName + "` domain class */" + LINE_SEPARATOR );

			writer.write( "@javax.annotation.Generated( value = \"Hibernate ORM Gradle tooling\" )" + LINE_SEPARATOR );
			writer.write( "@StaticMetamodel( " + domainClassName + ".class )" + LINE_SEPARATOR );
			writer.write( "public abstract class " + metamodelClassName );
			if ( metamodelSuperClassName != null ) {
				writer.write( " extends " + metamodelSuperClassName );
			}
			writer.write( " {" + LINE_SEPARATOR );

			writer.write( LINE_SEPARATOR );

			writer.write( "// Attribute name constants" + LINE_SEPARATOR );
			writer.write( LINE_SEPARATOR );

			attributes.forEach( attribute -> attribute.renderNameConstant( writer ) );

			writer.write( LINE_SEPARATOR );

			attributes.forEach( attribute -> attribute.renderJpaMembers( writer ) );

			writer.write( LINE_SEPARATOR );

			writer.write( "}" + LINE_SEPARATOR );
		}
		catch (IOException e) {
			throw new IllegalStateException( "Unable to open file : " + outputFile.getAbsolutePath(), e );
		}
	}
}
