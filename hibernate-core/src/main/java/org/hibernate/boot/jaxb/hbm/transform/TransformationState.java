/*
 * Hibernate, Relational Persistence for Idiomatic Java
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later.
 * See the lgpl.txt file in the root directory or http://www.gnu.org/licenses/lgpl-2.1.html.
 */
package org.hibernate.boot.jaxb.hbm.transform;

import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.hibernate.boot.jaxb.Origin;
import org.hibernate.boot.jaxb.hbm.spi.JaxbHbmEntityBaseDefinition;
import org.hibernate.boot.jaxb.hbm.spi.JaxbHbmFilterDefinitionType;
import org.hibernate.boot.jaxb.hbm.spi.JaxbHbmHibernateMapping;
import org.hibernate.boot.jaxb.hbm.spi.JaxbHbmTypeDefinitionType;
import org.hibernate.boot.jaxb.mapping.spi.JaxbEntityImpl;
import org.hibernate.boot.jaxb.mapping.spi.JaxbEntityMappingsImpl;
import org.hibernate.boot.jaxb.spi.Binding;
import org.hibernate.internal.util.StringHelper;
import org.hibernate.internal.util.collections.CollectionHelper;

/**
 * @author Steve Ebersole
 */
class TransformationState {
	private final List<Binding<JaxbHbmHibernateMapping>> hbmBindings;
	private final List<Binding<JaxbEntityMappingsImpl>> mappingBindings;

	private final Map<String, JaxbEntityImpl> entityMap = new HashMap<>();
	private final Map<JaxbHbmEntityBaseDefinition, JaxbEntityImpl> entityXref = new HashMap<>();

	private final Map<String, JaxbHbmTypeDefinitionType> typeDefMap = new HashMap<>();
	private final Map<String, JaxbHbmFilterDefinitionType> filterDefMap = new HashMap<>();

	public TransformationState(List<Binding<JaxbHbmHibernateMapping>> hbmBindings) {
		this.hbmBindings = hbmBindings;
		this.mappingBindings = CollectionHelper.arrayList( hbmBindings.size() );
		for ( Binding<JaxbHbmHibernateMapping> hbmBinding : this.hbmBindings ) {
			final JaxbEntityMappingsImpl mappingRoot = new JaxbEntityMappingsImpl();
			mappingRoot.setDescription( String.format(
					Locale.ROOT,
					"Generated by Hibernate HbmXmlTransformer from %s (%s)",
					hbmBinding.getOrigin().getName(),
					hbmBinding.getOrigin().getType()
			) );
			mappingBindings.add( new Binding<>( mappingRoot, hbmBinding.getOrigin() ) );
		}
	}

	public static String resolveEntityReferenceName(
			String referenceName,
			JaxbHbmHibernateMapping hibernateMapping,
			Map<String,JaxbEntityImpl> entityMap) {

		// First try it as a direct key reference; this covers the case of:
		// 		1. entity-name
		//		2. fully-qualified name
		final JaxbEntityImpl byDirectName = entityMap.get( referenceName );
		if ( byDirectName != null ) {
			return referenceName;
		}

		// Next, try as an implicitly qualified name
		if ( StringHelper.isNotEmpty( hibernateMapping.getPackage() ) ) {
			final String qualifiedName = StringHelper.qualify( hibernateMapping.getPackage(), referenceName );
			final JaxbEntityImpl byQualifiedName = entityMap.get( qualifiedName );
			if ( byQualifiedName != null ) {
				return qualifiedName;
			}
		}

		return null;
	}

	public static String requireEntityReferenceName(
			String referenceName,
			JaxbHbmHibernateMapping hibernateMapping,
			Map<String,JaxbEntityImpl> entityMap,
			Origin origin) {
		final String resolved = resolveEntityReferenceName( referenceName, hibernateMapping, entityMap );
		if ( resolved == null ) {
			throw new UnknownEntityReferenceException( referenceName, origin );
		}
		return resolved;
	}

	public static JaxbEntityImpl resolveEntityReference(
			String referenceName,
			JaxbHbmHibernateMapping hibernateMapping,
			Map<String,JaxbEntityImpl> entityMap) {

		// First try it as a direct key reference; this covers the case of:
		// 		1. entity-name
		//		2. fully-qualified name
		final JaxbEntityImpl byDirectName = entityMap.get( referenceName );
		if ( byDirectName != null ) {
			return byDirectName;
		}

		// Next, try as an implicitly qualified name
		if ( StringHelper.isNotEmpty( hibernateMapping.getPackage() ) ) {
			final String qualifiedName = StringHelper.qualify( hibernateMapping.getPackage(), referenceName );
			final JaxbEntityImpl byQualifiedName = entityMap.get( qualifiedName );
			if ( byQualifiedName != null ) {
				return byQualifiedName;
			}
		}

		return null;
	}

	public static JaxbEntityImpl requireEntityReference(
			String referenceName,
			JaxbHbmHibernateMapping hibernateMapping,
			Map<String,JaxbEntityImpl> entityMap,
			Origin origin) {
		final JaxbEntityImpl resolved = resolveEntityReference( referenceName, hibernateMapping, entityMap );
		if ( resolved == null ) {
			throw new UnknownEntityReferenceException( referenceName, origin );
		}
		return resolved;
	}


	public List<Binding<JaxbHbmHibernateMapping>> getHbmBindings() {
		return hbmBindings;
	}

	public List<Binding<JaxbEntityMappingsImpl>> getMappingBindings() {
		return mappingBindings;
	}

	public Map<String, JaxbEntityImpl> getEntityMap() {
		return entityMap;
	}

	public Map<JaxbHbmEntityBaseDefinition, JaxbEntityImpl> getEntityXref() {
		return entityXref;
	}

	public Map<String, JaxbHbmTypeDefinitionType> getTypeDefinitionMap() {
		return typeDefMap;
	}

	public void acceptTypeDefinition(JaxbHbmTypeDefinitionType hbmTypeDef) {
		typeDefMap.put( hbmTypeDef.getName(), hbmTypeDef );
	}
}
