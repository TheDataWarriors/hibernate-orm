/*
 * Hibernate, Relational Persistence for Idiomatic Java
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later.
 * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
 */
package org.hibernate.orm.test.id.sequence;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.SequenceGenerator;

import org.hibernate.cfg.Environment;
import org.hibernate.dialect.PostgreSQLDialect;
import org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl;

import org.hibernate.testing.TestForIssue;
import org.hibernate.testing.orm.junit.EntityManagerFactoryScope;
import org.hibernate.testing.orm.junit.Jpa;
import org.hibernate.testing.orm.junit.RequiresDialect;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.fail;


/**
 * @author Vlad Mhalcea
 */
@TestForIssue(jiraKey = "HHH-13106")
@RequiresDialect(value = PostgreSQLDialect.class, majorVersion = 10)
@Jpa(
		annotatedClasses = PostgreSQLIdentitySequenceTest.Role.class
)
public class PostgreSQLIdentitySequenceTest {

	private DriverManagerConnectionProviderImpl connectionProvider;

	@BeforeAll
	public void produceEntityManagerFactory() throws SQLException {
		connectionProvider = new DriverManagerConnectionProviderImpl();
		connectionProvider.configure( Environment.getProperties() );

		try (Connection connection = connectionProvider.getConnection();
			 Statement statement = connection.createStatement()) {
			statement.execute( "DROP TABLE IF EXISTS roles CASCADE" );
			statement.execute( "CREATE TABLE roles ( id BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY )" );
		}
	}

	@AfterAll
	public void releaseResources() {

		try (Connection connection = connectionProvider.getConnection();
			 Statement statement = connection.createStatement()) {
			statement.execute( "DROP TABLE IF EXISTS roles CASCADE" );
		}
		catch (SQLException e) {
			fail( e.getMessage() );
		}

		if ( connectionProvider != null ) {
			connectionProvider.stop();
		}
	}

	@Test
	public void test(EntityManagerFactoryScope scope) {
		scope.inTransaction( entityManager -> {
			Role role = new Role();
			entityManager.persist( role );
		} );
	}

	@Entity(name = "Role")
	public static class Role {

		@Id
		@Column(name = "id")
		@SequenceGenerator(name = "roles_id_seq", sequenceName = "roles_id_seq", allocationSize = 1)
		@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "roles_id_seq")
		private Long id;

		public Long getId() {
			return id;
		}

		public void setId(final Long id) {
			this.id = id;
		}
	}

}
