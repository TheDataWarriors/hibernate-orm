import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'org.hibernate.build.xjc-jakarta'
}

apply from: rootProject.file( 'gradle/published-java-module.gradle' )
apply plugin: 'org.hibernate.orm.antlr'
apply plugin: 'org.hibernate.matrix-test'


ext {
    jaxbTargetDir = project.file( "${buildDir}/generated/sources/xjc/main" )
}

configurations {
    xjc
}


dependencies {
    api libraries.jakarta_jpa
    api libraries.jakarta_jta
    api libraries.jakarta_activation
    api libraries.jakarta_jaxb_api
    api libraries.jakarta_jaxb_runtime

    compileOnly libraries.jakarta_jacc
    compileOnly libraries.jakarta_validation
    compileOnly libraries.jakarta_cdi

    api libraries.antlr

    // This can now be made provided
    // Could be made optional?
    api libraries.byteBuddy
    api libraries.jandex
    api libraries.classmate

    compileOnly libraries.ant

    api libraries.dom4j
    api libraries.commons_annotations

    testImplementation project(':hibernate-testing')

    testImplementation libraries.shrinkwrap_api
    testImplementation libraries.shrinkwrap
    testImplementation libraries.jakarta_jacc
    testImplementation libraries.jakarta_validation
    testImplementation libraries.jandex
    testImplementation libraries.classmate
    testImplementation libraries.mockito
    testImplementation libraries.mockito_inline
    testImplementation libraries.jodaTime
    testImplementation libraries.assertj

    testImplementation libraries.jakarta_cdi

    testImplementation( libraries.jakarta_validator ) {
        // for test runtime
        transitive = true
    }

    // for testing stored procedure support
    testImplementation libraries.derby

	testRuntimeOnly libraries.wildfly_transaction_client
    testRuntimeOnly libraries.jakarta_el
    testRuntimeOnly libraries.jakarta_weld

    testRuntimeOnly 'org.hamcrest:hamcrest-all:1.3'
    testRuntimeOnly "org.jboss.spec.javax.ejb:jboss-ejb-api_3.2_spec:1.0.0.Final"
    testRuntimeOnly 'jaxen:jaxen:1.1'
    testRuntimeOnly libraries.byteBuddy
    testRuntimeOnly libraries.atomikos
    testRuntimeOnly libraries.atomikos_jta

    testImplementation libraries.shrinkwrap_descriptors_api_javaee
    testImplementation libraries.shrinkwrap_descriptors_impl_javaee

    testImplementation libraries.jboss_ejb_spec_jar
    testImplementation libraries.jboss_annotation_spec_jar

    antlr libraries.antlr

    testAnnotationProcessor project( ':hibernate-jpamodelgen' )

    xjc 'org.glassfish.jaxb:jaxb-xjc:3.0.2'
//    xjc 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'
    xjc 'org.glassfish.jaxb:jaxb-runtime:3.0.2'
//    xjc 'org.jvnet.jaxb2_commons:jaxb2-basics:3.0.0-SNAPSHOT'
//    xjc 'org.jvnet.jaxb2_commons:jaxb2-basics-ant:3.0.0-SNAPSHOT'

//    xjc 'org.jvnet.jaxb2_commons:jaxb2-basics:3.0.0-SNAPSHOT'
//    xjc 'org.jvnet.jaxb2_commons:jaxb2-basics-ant:3.0.0-SNAPSHOT'

    xjc rootProject.fileTree(dir: 'patched-libs/jaxb2-basics', include: '*.jar')
//    xjc libraries.ant
}


sourceSets {
    main {
        // add the XJC generated JAXB classes to the main source-set
        java{
            srcDir "${buildDir}/generated/sources/xjc/main/cfg"
            srcDir "${buildDir}/generated/sources/xjc/main/hbm"
            srcDir "${buildDir}/generated/sources/xjc/main/mapping"
        }
    }

    // resources inherently exclude sources
    test {
        resources {
            srcDir 'src/test/java'
            srcDir 'src/test/resources'
            srcDir 'src/test/bundles'
        }
    }
}

task copyBundleResources (type: Copy) {
    ext {
        bundlesTargetDir = file( "${buildDir}/bundles" )
        bundleTokens = dbBundle[db]
        ext.bundleTokens['buildDirName'] = project.relativePath( buildDir )
    }

    from file('src/test/bundles/templates')
    into ext.bundlesTargetDir
    filter( ReplaceTokens, tokens: ext.bundleTokens)

    doFirst {
        ext.bundlesTargetDir.mkdirs()
    }
}

processTestResources {
    dependsOn tasks.copyBundleResources
    duplicatesStrategy = DuplicatesStrategy.WARN
}

xjc {
    outputDirectory = project.jaxbTargetDir

    schemas {
        cfg {
            xsdFile = 'src/main/resources/org/hibernate/xsd/cfg/legacy-configuration-4.0.xsd'
            xjcBindingFile = 'src/main/xjb/hbm-configuration-bindings.xjb'
        }
        hbm {
            xsdFile = file( 'src/main/resources/org/hibernate/xsd/mapping/legacy-mapping-4.0.xsd' )
            xjcBindingFile = file( 'src/main/xjb/hbm-mapping-bindings.xjb' )
            xjcExtensions += ['inheritance', 'simplify']
        }
        mapping {
            xsdFile = file( 'src/main/resources/org/hibernate/jpa/orm_2_2.xsd' )
            xjcBindingFile = file( 'src/main/xjb/mapping-bindings.xjb' )
            xjcExtensions += ['inheritance']
        }
    }
}

task generateEnversStaticMetamodel(
        type: JavaCompile,
        description: "Generate the Hibernate Envers revision entity static metamodel classes." ) {
    source = sourceSets.main.java
    // we only want to include these specific classes for metamodel generation.
    // if envers adds any additional revision entity classes, they must be listed here.
    include 'org/hibernate/envers/DefaultRevisionEntity.java'
    include 'org/hibernate/envers/DefaultTrackingModifiedEntitiesRevisionEntity.java'
    include 'org/hibernate/envers/enhanced/SequenceIdRevisionEntity.java'
    include 'org/hibernate/envers/enhanced/SequenceIdTrackingModifiedEntitiesRevisionEntity.java'

    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.compileClasspath
    options.compilerArgs = [
            "-proc:only",
            "-processor",
            "org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor"
    ]

    // put static metamodel classes back out to the source tree since they're version controlled.
    destinationDir = new File( "${projectDir}/src/main/java" )
}

tasks.withType( Test.class ).each { test ->
    test.systemProperty 'file.encoding', 'utf-8'

    if ( gradle.ext.javaVersions.test.launcher.asInt() >= 9 ) {
        // See org.hibernate.boot.model.naming.NamingHelperTest.DefaultCharset.set
        test.jvmArgs( ['--add-opens', 'java.base/java.nio.charset=ALL-UNNAMED'] )
        // Weld needs this to generate proxies
        test.jvmArgs( ['--add-opens', 'java.base/java.security=ALL-UNNAMED'] )
        test.jvmArgs( ['--add-opens', 'java.base/java.lang=ALL-UNNAMED'] )
    }

    test.beforeTest { descriptor ->
        //println "Starting test: " + descriptor
    }

    // Allow to exclude specific tests
    if (project.hasProperty('excludeTests')) {
        test.filter {
            excludeTestsMatching project.property('excludeTests').toString()
        }
    }

    // widen the overall 6.0 filter to include various package-protected tests
    test.include 'org/hibernate/bytecode/internal/bytebuddy/**'
    test.include 'org/hibernate/event/service/internal/**'
    test.include 'org/hibernate/tool/schema/internal/**'
}
