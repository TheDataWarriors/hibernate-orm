/*
 * Hibernate, Relational Persistence for Idiomatic Java
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later
 * See the lgpl.txt file in the root directory or http://www.gnu.org/licenses/lgpl-2.1.html
 */

apply from: rootProject.file( 'gradle/java-module.gradle' )
apply plugin: 'maven-publish'
apply plugin: 'maven-publish-auth'
apply from: rootProject.file( 'gradle/publishing-repos.gradle' )


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Jar

jar {
	manifest = osgiManifest {
		// GRADLE-1411: Even if we override Imports and Exports
		// auto-generation with instructions, classesDir and classpath
		// need to be here (temporarily).

		if ( project.pluginManager.hasPlugin( 'groovy' ) ) {
			classesDir = sourceSets.main.groovy.outputDir
		}
		else {
			classesDir = sourceSets.main.output.classesDir
		}
		classpath = configurations.runtime


		// Java 9 module name
		instruction 'Automatic-Module-Name', project.java9ModuleName

		// the OSGi metadata
		symbolicName project.java9ModuleName
		vendor 'Hibernate.org'
		description project.description
		docURL "http://www.hibernate.org/orm/${project.hibernateMajorMinorVersion}"

		instruction 'Import-Package',
					// Temporarily support JTA 1.1 -- Karaf and other frameworks still
					// use it.  Without this, the plugin generates [1.2,2).
					'javax.transaction;version="[1.1,2)"',
					// Tell Gradle OSGi to still dynamically import the other packages.
					// IMPORTANT: Do not include the * in the modules' .gradle files.
					// If it exists more than once, the manifest will physically contain a *.
					'*'

		// Basic JAR manifest metadata
		instruction 'Specification-Title', project.name
		instruction 'Specification-Version', project.version
		instruction 'Specification-Vendor', 'Hibernate.org'
		instruction 'Implementation-Title', project.name
		instruction 'Implementation-Version', project.version
		instruction 'Implementation-Vendor', 'Hibernate.org'
		instruction 'Implementation-Vendor-Id', 'org.hibernate'
		instruction 'Implementation-Url', 'http://hibernate.org/orm'

		instruction 'Hibernate-VersionFamily', project.hibernateMajorMinorVersion
		instruction 'Hibernate-JpaVersion', project.jpaVersion
	}
}

task sourcesJar(type: Jar) {
	from project.sourceSets.main.allSource
	manifest = project.tasks.jar.manifest
	classifier = 'sources'
}

task javadocJar(type: Jar) {
	from project.tasks.javadoc.outputs
	manifest = project.tasks.jar.manifest
	classifier = 'javadoc'
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Javadoc

javadoc {
	exclude( "**/internal/*" )
	exclude( "**/generated-src/**" )

	final int currentYear = new GregorianCalendar().get( Calendar.YEAR )

	configure( options ) {
		docletpath = configurations.asciidoclet.files.asType(List)
		doclet = 'org.asciidoctor.Asciidoclet'

		windowTitle = "$project.name JavaDocs"
		docTitle = "$project.name JavaDocs ($project.version)"
		bottom = "Copyright &copy; 2001-$currentYear <a href=\"http://redhat.com\">Red Hat, Inc.</a>  All Rights Reserved."
		use = true
		encoding = 'UTF-8'
		links += [
				'https://docs.oracle.com/javase/8/docs/api/',
				'http://docs.jboss.org/hibernate/beanvalidation/spec/2.0/api/',
				'http://docs.jboss.org/cdi/api/2.0/',
				'https://docs.oracle.com/javaee/7/api/'
		]

		if ( JavaVersion.current().isJava8Compatible() ) {
			options.addStringOption( 'Xdoclint:none', '-quiet' )
		}

		doFirst {
			// ordering problems if we try to do this during config phase :(
			classpath += project.sourceSets.main.output + project.sourceSets.main.compileClasspath + project.configurations.provided
		}
	}
}



// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Publishing

publishing {
	publications {
		publishedArtifacts( MavenPublication ) {
			from components.java

			artifact( sourcesJar ) {
				// todo : do these really need to be specified twice?
				classifier 'sources'
			}

			artifact( javadocJar ) {
				// todo : do these really need to be specified twice?
				classifier "javadoc"
			}
		}
	}
}

model {
	tasks.generatePomFileForPublishedArtifactsPublication {
		destination = file( "${buildDir}/generated-pom.xml" )
	}
}

task generatePomFile( dependsOn: 'generatePomFileForPublishedArtifactsPublication' )


task release( dependsOn: publish ) {
	doFirst {
		println "Starting release for $project.name:$project.version"
	}
}

afterEvaluate {

	// delay pom customization until project evaluation is complete

	PublishingExtension gradlePublishingExtension = project.extensions.getByType( PublishingExtension )

	Set<MavenPublication> mavenPublications = gradlePublishingExtension.publications.withType( MavenPublication )
	if ( mavenPublications.size() <= 0 || mavenPublications.size() > 1 ) {
		throw new GradleException( "Expecting just a single MavenPublication [$project.path], but found " + mavenPublications.size() + " : " + mavenPublications*.name )
	}

	project.configure( mavenPublications.first() ) {
		pom.withXml {
			asNode().appendNode( 'name', "Hibernate ORM - $project.name" )
			asNode().appendNode( 'description', project.description )

			Node lgplLicenseNode = asNode().appendNode( "licenses" ).appendNode( "license" )
			lgplLicenseNode.appendNode( 'name', 'GNU Lesser General Public License' )
			lgplLicenseNode.appendNode( 'url', 'http://www.gnu.org/licenses/lgpl-2.1.html' )
			lgplLicenseNode.appendNode(
					'comments',
					'See discussion at http://hibernate.org/license for more details.'
			)
			lgplLicenseNode.appendNode( 'distribution', 'repo' )

			asNode().children().last() + {
				url 'http://hibernate.org'
				organization {
					name 'Hibernate.org'
					url 'http://hibernate.org'
				}
				issueManagement {
					system 'jira'
					url 'https://hibernate.atlassian.net/browse/HHH'
				}
				scm {
					url 'http://github.com/hibernate/hibernate-orm'
					connection 'scm:git:http://github.com/hibernate/hibernate-orm.git'
					developerConnection 'scm:git:git@github.com:hibernate/hibernate-orm.git'
				}
				developers {
					developer {
						id 'hibernate-team'
						name 'The Hibernate Development Team'
						organization 'Hibernate.org'
						organizationUrl 'http://hibernate.org'
					}
				}
			}

			// TEMPORARY : currently Gradle Publishing feature is exporting dependencies as 'runtime' scope,
			//      rather than 'compile'; fix that.
			if ( asNode().dependencies != null && asNode().dependencies.size() > 0 ) {
				asNode().dependencies[0].dependency.each {
					it.scope[0].value = 'compile'
				}
			}
		}
	}
}